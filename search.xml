<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>YOLOv5实现中医药软包装检测</title>
      <link href="2021/06/05/YOLOv5%E5%AE%9E%E7%8E%B0%E4%B8%AD%E5%8C%BB%E8%8D%AF%E8%BD%AF%E5%8C%85%E8%A3%85%E6%A3%80%E6%B5%8B/"/>
      <url>2021/06/05/YOLOv5%E5%AE%9E%E7%8E%B0%E4%B8%AD%E5%8C%BB%E8%8D%AF%E8%BD%AF%E5%8C%85%E8%A3%85%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>windows10+Anaconda3+pytorch1.8+python3.8+pycharm</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>1.访问<a href="https://www.anaconda.com/products/individual">Anaconda官网</a>下载Anaconda3并按照安装程序引导完成安装</p><img src="https://z3.ax1x.com/2021/06/05/2ta7Y4.jpg" style="zoom: 80%;" /><p>2.找到.condarc文件</p><img src="https://z3.ax1x.com/2021/06/05/2taHfJ.jpg" style="zoom: 50%;" /><p>将channels下的default项去掉</p><p>3.启动Anaconda Prompt</p><p>添加镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line"></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="安装Pytorch-amp-Cuda-amp-Cudnn"><a href="#安装Pytorch-amp-Cuda-amp-Cudnn" class="headerlink" title="安装Pytorch&amp;Cuda&amp;Cudnn"></a>安装Pytorch&amp;Cuda&amp;Cudnn</h2><p>1.创建虚拟环境</p><p><code>conda create -n yolov5 python=3.8</code></p><p>2.安装pytorch,torchvision,torchaudio,cudatoolkit</p><p><code>conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch</code></p><p>这里安装的pytorch默认为官网的最新版，cudatoolkit指定为10.2，如有其它版本需要</p><p>则访问<a href="https://pytorch.org/get-started/previous-versions/">以前版本</a>找到所需版本</p><img src="https://z3.ax1x.com/2021/06/05/2tdbE8.jpg" style="zoom: 80%;" /><p>至于cudatoolkit的版本，则需要根据nvidia驱动程序的版本来选择</p><img src="https://z3.ax1x.com/2021/06/05/2twmK1.jpg" style="zoom:80%;" /> <h2 id="安装YOLOv5"><a href="#安装YOLOv5" class="headerlink" title="安装YOLOv5"></a>安装YOLOv5</h2><p><strong>由于YOLOv5版本在不断更新，依赖也一直在变化</strong></p><p>本文的YOLOv5下载链接为：<a href="https://pan.baidu.com/s/1DYmpsDqzMJRwDuOv-KC7Ew"></a></p><p>提取码：1234</p><p>1.安装YOLOv5</p><p><code>conda activate yolov5 </code></p><p>切换到yolov5-develop目录</p><p><code>pip install -r requirements.txt</code></p><p><strong>到这里依赖全部安装完成</strong></p><p>2.使用pycharm打开yolov5-develop，编译环境选择刚刚所创建的虚拟环境</p><h2 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h2><p><strong>原始图片35张</strong></p><img src="https://z3.ax1x.com/2021/06/05/2trZFK.jpg" style="zoom:80%;" /><p><img src="https://z3.ax1x.com/2021/06/05/2trmWD.png"></p><p><strong>使用labelimg进行数据集标注</strong></p><p><strong>标注好后由于样本数量太小，需要进行数据增广</strong></p><p>具体标注和增广过程这里不在赘述</p><p>数据增广后的部分样本：</p><p><img src="https://z3.ax1x.com/2021/06/05/2tr2pF.jpg"></p><p>相应的每一张图片都有对应的标签，标注时要将标签保存为txt格式的，如果是xml格式的还需进行格式转换</p><p><strong>XML转txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&quot;aeroplane&quot;</span>, <span class="string">&quot;bicycle&quot;</span>, <span class="string">&quot;bird&quot;</span>, <span class="string">&quot;boat&quot;</span>, <span class="string">&quot;bottle&quot;</span>, <span class="string">&quot;bus&quot;</span>, <span class="string">&quot;car&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;chair&quot;</span>, <span class="string">&quot;cow&quot;</span>, <span class="string">&quot;diningtable&quot;</span>, <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">           <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;motorbike&quot;</span>, <span class="string">&quot;person&quot;</span>, <span class="string">&quot;pottedplant&quot;</span>, <span class="string">&quot;sheep&quot;</span>, <span class="string">&quot;sofa&quot;</span>, <span class="string">&quot;train&quot;</span>, <span class="string">&quot;tvmonitor&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将x1, y1, x2, y2转换成yolov5所需要的x, y, w, h格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xyxy2xywh</span>(<span class="params">size, box</span>):</span></span><br><span class="line">    dw = <span class="number">1.</span> / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span> / size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">2</span>]) / <span class="number">2</span> * dw</span><br><span class="line">    y = (box[<span class="number">1</span>] + box[<span class="number">3</span>]) / <span class="number">2</span> * dh</span><br><span class="line">    w = (box[<span class="number">2</span>] - box[<span class="number">0</span>]) * dw</span><br><span class="line">    h = (box[<span class="number">3</span>] - box[<span class="number">1</span>]) * dh</span><br><span class="line">    <span class="keyword">return</span> (x, y, w, h)         <span class="comment"># 返回的都是标准化后的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">voc2yolo</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 可以打印看看该路径是否正确</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(os.listdir(path)))</span><br><span class="line">    <span class="comment"># 遍历每一个xml文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="comment"># xml文件的完整路径, 注意：因为是路径所以要确保准确，我是直接使用了字符串拼接, 为了保险可以用os.path.join(path, file)</span></span><br><span class="line">        label_file = path + file</span><br><span class="line">        <span class="comment"># 最终要改成的txt格式文件,这里我是放在voc2007/labels/下面</span></span><br><span class="line">        <span class="comment"># 注意: labels文件夹必须存在，没有就先创建，不然会报错</span></span><br><span class="line">        out_file = <span class="built_in">open</span>(path.replace(<span class="string">&#x27;Annotations&#x27;</span>, <span class="string">&#x27;labels&#x27;</span>) + file.replace(<span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(label_file)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始解析xml文件</span></span><br><span class="line">        tree = ET.parse(label_file)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        size = root.find(<span class="string">&#x27;size&#x27;</span>)            <span class="comment"># 图片的shape值</span></span><br><span class="line">        w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">        h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">            cls_id = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 获取整个bounding box框</span></span><br><span class="line">            bndbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">            <span class="comment"># xml给出的是x1, y1, x2, y2</span></span><br><span class="line">            box = [<span class="built_in">float</span>(bndbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(bndbox.find(<span class="string">&#x27;ymin&#x27;</span>).text), <span class="built_in">float</span>(bndbox.find(<span class="string">&#x27;xmax&#x27;</span>).text),</span><br><span class="line">                <span class="built_in">float</span>(bndbox.find(<span class="string">&#x27;ymax&#x27;</span>).text)]</span><br><span class="line">            <span class="comment"># 将x1, y1, x2, y2转换成yolov5所需要的x_center, y_center, w, h格式</span></span><br><span class="line">            bbox = xyxy2xywh((w, h), box)</span><br><span class="line">            <span class="comment"># 写入目标文件中，格式为 id x y w h</span></span><br><span class="line">            out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join(<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> bbox) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># 这里要改成自己数据集路径的格式</span></span><br><span class="line">    path = <span class="string">&#x27;Annotations/&#x27;</span></span><br><span class="line">    voc2yolo(path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成转换后每一张图片都有一个对应的txt文件</p><h2 id="训练前的准备"><a href="#训练前的准备" class="headerlink" title="训练前的准备"></a>训练前的准备</h2><p>新建medicine_data文件夹,<strong>文件结构：</strong></p><p>—medicine_data</p><p>​       —images</p><p>​       —labels</p><p>​       —medicine.yaml</p><p><strong>images即为而训练集，labels文件夹下为训练集的标签</strong></p><p><strong>其中medicine.yaml:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">D:/medicine_data/images/</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">D:/medicine_data/images/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;m&#x27;</span>]</span><br></pre></td></tr></table></figure><p>打开yolov5-develop/models下的的yolov5s.yaml</p><p><strong>将nc一项的值改为1</strong></p><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p>在pycharm的Terminator中运行</p><p><code>python train.py --data D:/medicine_data/medicine.yaml --cfg ./models/yolov5s.yaml --weights ./weights/yolov5s.pt --batch-size 8 --epochs 450 </code></p><p><strong>这里的batch-size根据显存大小适当调整，总共训练450个epoch</strong></p><p><strong>训练开始后可能出现“页面太小”的报错，这时候要进入高级系统设置下 的性能调整分给D盘的虚拟内存大小</strong></p><p>正在训练</p><p><img src="https://z3.ax1x.com/2021/06/05/2tgzJx.jpg"></p><p><strong>如果想要训练过程可视化，需要先安装wandb</strong></p><p><code>pip install wandb</code></p><p>大概训练了十三的小时后，得到了训练好的最后一次模型和最佳模型</p><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><p>训练后的模型保存在runs/train目录下面</p><p><img src="https://z3.ax1x.com/2021/06/05/2tWULF.jpg"></p><h3 id="检查训练效果"><a href="#检查训练效果" class="headerlink" title="检查训练效果"></a>检查训练效果</h3><p><code>python detect.py --source data/images/medicine5.jpg --weights ./runs/train/exp38/weights/best.pt --conf 0.4</code></p><p><img src="https://z3.ax1x.com/2021/06/05/2tRNEd.jpg"></p><p><img src="https://z3.ax1x.com/2021/06/05/2tRYHH.jpg"></p><p>​     <strong>可以看到大部分在表面的中药软包装都检测出来了并且置信度高，少部分被覆盖的没有检测出来，检测效果良好</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>使用yolov5进行中药软包装的最终检测效果良好，但是本项目也存在明显的缺陷：原始样本数太少，虽然可以数据增广但是许多数据相比原始数据仍没有很大的变换，如果一开始准备大量数据然后进行几倍的增广可能到最后的训练和检测结果会和现在有较大出入</strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLOv5 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种BUG</title>
      <link href="2021/06/05/%E5%90%84%E7%A7%8DBUG/"/>
      <url>2021/06/05/%E5%90%84%E7%A7%8DBUG/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hexo-d部署出现SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443"><a href="#1-hexo-d部署出现SSL-connect-SSL-ERROR-SYSCALL-in-connection-to-github-com-443" class="headerlink" title="1.hexo d部署出现SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443"></a>1.hexo d部署出现SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</h2><p>解决：</p><p><img src="https://z3.ax1x.com/2021/06/05/2tT5B6.jpg"></p><p><em><strong>重点方法二！！！！</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SVM+HOG实现行人检测</title>
      <link href="2021/06/01/SVM%20HOG%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8B/"/>
      <url>2021/06/01/SVM%20HOG%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h2><p>windows10+anaconda+python3.6+opencv3.4.1+pycharm</p><h2 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h2><h3 id="1-数据集一：正样本924张，负样本2120张，验证集179张，大小均为64-128像素"><a href="#1-数据集一：正样本924张，负样本2120张，验证集179张，大小均为64-128像素" class="headerlink" title="1.数据集一：正样本924张，负样本2120张，验证集179张，大小均为64*128像素"></a>1.数据集一：正样本924张，负样本2120张，验证集179张，大小均为64*128像素</h3><p>网盘链接：<a href="">https://pan.baidu.com/s/1EEfVVQKUAkEFWD2Si-v-4A</a></p><p>提取码：1234</p><img src="https://z3.ax1x.com/2021/06/01/2uiBi4.jpg" style="zoom:80%;" /><h3 id="2-数据集二：提取了INRIA-Person-Dataset中的正样本和负样本，因为尺寸不合适，需要进行缩放和剪裁："><a href="#2-数据集二：提取了INRIA-Person-Dataset中的正样本和负样本，因为尺寸不合适，需要进行缩放和剪裁：" class="headerlink" title="2.数据集二：提取了INRIA Person Dataset中的正样本和负样本，因为尺寸不合适，需要进行缩放和剪裁："></a>2.数据集二：提取了INRIA Person Dataset中的正样本和负样本，因为尺寸不合适，需要进行缩放和剪裁：</h3><p>网盘链接：<a href="">https://pan.baidu.com/s/1UplbM5N2_KgNYxX63vL6fQ</a></p><p>提取码：1234</p><img src="https://z3.ax1x.com/2021/06/01/2uiDJJ.jpg" style="zoom:80%;" /><p>图像的缩放和剪裁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义待批量裁剪图像的路径地址</span></span><br><span class="line">IMAGE_INPUT_PATH = <span class="string">&#x27;Positiv&#x27;</span></span><br><span class="line"><span class="comment"># 定义裁剪后的图像存放地址</span></span><br><span class="line">IMAGE_OUTPUT_PATH = <span class="string">&#x27;Positive&#x27;</span></span><br><span class="line"><span class="comment"># 定义裁剪图片左、上、右、下的像素坐标</span></span><br><span class="line">BOX_LEFT, BOX_UP, BOX_RIGHT, BOX_DOWN = <span class="number">0</span>, <span class="number">0</span>,<span class="number">64</span> , <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each_image <span class="keyword">in</span> os.listdir(IMAGE_INPUT_PATH):</span><br><span class="line">    <span class="comment"># 每个图像全路径</span></span><br><span class="line">    image_input_fullname = IMAGE_INPUT_PATH + <span class="string">&#x27;/&#x27;</span> + each_image</span><br><span class="line">    <span class="comment"># PIL库打开每一张图像</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_input_fullname)</span><br><span class="line">    plt.figure(<span class="string">&quot;image_input_fullname&quot;</span>)</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(img.<span class="built_in">format</span>, img.size, img.mode)</span><br><span class="line">    <span class="comment"># 从原始图像返回一个矩形区域，区域是一个4元组定义左上右下像素坐标</span></span><br><span class="line">    box = (BOX_LEFT, BOX_UP, BOX_RIGHT + BOX_LEFT, BOX_DOWN + BOX_UP)</span><br><span class="line">    <span class="comment"># 进行roi裁剪</span></span><br><span class="line">    roi_area = img.crop(box)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(roi_area.<span class="built_in">format</span>, roi_area.size, roi_area.mode)</span><br><span class="line">    <span class="comment"># 裁剪后每个图像的路径+名称</span></span><br><span class="line">    image_output_fullname = IMAGE_OUTPUT_PATH + <span class="string">&quot;/&quot;</span> + each_image</span><br><span class="line">    <span class="comment"># 存储裁剪得到的图像</span></span><br><span class="line">    roi_area.save(image_output_fullname)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; crop done.&#x27;</span>.<span class="built_in">format</span>(each_image))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="comment">#将原图像裁剪到64*128像素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertjpg</span>(<span class="params">jpgfile,outdir,width=<span class="number">64</span>,height=<span class="number">128</span></span>):</span></span><br><span class="line">    img=Image.<span class="built_in">open</span>(jpgfile)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_img=img.resize((width,height),Image.BILINEAR)</span><br><span class="line">        new_img.save(os.path.join(outdir,os.path.basename(jpgfile)))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#将该文件夹下的所有png格式统一进行裁剪</span></span><br><span class="line"><span class="keyword">for</span> jpgfile <span class="keyword">in</span> glob.glob(<span class="string">&#x27;Negativ/*.png&#x27;</span>):</span><br><span class="line">    <span class="comment">#输出文件夹</span></span><br><span class="line">    convertjpg(jpgfile,<span class="string">&#x27;Negative&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="HOG特征提取"><a href="#HOG特征提取" class="headerlink" title="HOG特征提取"></a>HOG特征提取</h2><p>​        Dalal提出的Hog特征提取的过程：把样本图像分割为若干个像素的单元（cell），把梯度方向平均划分为9个区间（bin），在每个单元里面对所有像素的梯度方向在各个方向区间进行直方图统计，得到一个9维的特征向量，每相邻的4个单元构成一个块（block），把一个块内的特征向量联起来得到36维的特征向量，用块对样本图像进行扫描，扫描步长为一个单元。最后将所有块的特征串联起来，就得到了人体的特征。例如，对于64<em>128的图像而言，每8</em>8的像素组成一个cell，每2<em>2个cell组成一个块，因为每个cell有9个特征，所以每个块内有4</em>9=36个特征，以8个像素为步长，那么，水平方向将有7个扫描窗口，垂直方向将有15个扫描窗口。也就是说，64<em>128的图片，总共有36</em>7*15=3780个特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_hog</span>(<span class="params">samples, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    从训练数据集中提取HOG特征，并返回</span></span><br><span class="line"><span class="string">    :param samples: 训练数据集</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return train: 从训练数据集中提取的HOG特征</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    train = []</span><br><span class="line">    logger.info(<span class="string">&#x27;Extracting HOG Descriptors...&#x27;</span>)</span><br><span class="line">    num = <span class="number">0.</span></span><br><span class="line">    total = <span class="built_in">len</span>(samples)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> samples:</span><br><span class="line">        num += <span class="number">1.</span></span><br><span class="line">        logger.info(<span class="string">&#x27;Processing &#123;&#125; &#123;:2.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(f, num/total*<span class="number">100</span>))</span><br><span class="line">        hog = cv2.HOGDescriptor((<span class="number">64</span>,<span class="number">128</span>), (<span class="number">16</span>,<span class="number">16</span>), (<span class="number">8</span>,<span class="number">8</span>), (<span class="number">8</span>,<span class="number">8</span>), <span class="number">9</span>)</span><br><span class="line">        <span class="comment"># hog = cv2.HOGDescriptor()</span></span><br><span class="line">        img = cv2.imread(f, <span class="number">1</span>)</span><br><span class="line">        img = cv2.resize(img, (<span class="number">64</span>,<span class="number">128</span>))</span><br><span class="line">        descriptors = hog.compute(img)</span><br><span class="line">        logger.info(<span class="string">&#x27;hog feature descriptor size: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(descriptors.shape))    <span class="comment"># (3780, 1)</span></span><br><span class="line">        train.append(descriptors)</span><br><span class="line"></span><br><span class="line">    train = np.float32(train)</span><br><span class="line">    train = np.resize(train, (total, <span class="number">3780</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train</span><br></pre></td></tr></table></figure><h2 id="构建SVM分类器并开始训练"><a href="#构建SVM分类器并开始训练" class="headerlink" title="构建SVM分类器并开始训练"></a>构建SVM分类器并开始训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_svm</span>(<span class="params">train, labels, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    训练SVM分类器</span></span><br><span class="line"><span class="string">    :param train: 训练数据集</span></span><br><span class="line"><span class="string">    :param labels: 对应训练集的标签</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return: SVM检测器（注意：opencv的hogdescriptor中的svm不能直接用opencv的svm模型，而是要导出对应格式的数组）</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    logger.info(<span class="string">&#x27;Configuring SVM classifier.&#x27;</span>)</span><br><span class="line">    svm = cv2.ml.SVM_create()</span><br><span class="line">    svm.setCoef0(<span class="number">0.0</span>)</span><br><span class="line">    svm.setDegree(<span class="number">3</span>)</span><br><span class="line">    criteria = (cv2.TERM_CRITERIA_MAX_ITER + cv2.TERM_CRITERIA_EPS, <span class="number">1000</span>, <span class="number">1e-3</span>)</span><br><span class="line">    svm.setTermCriteria(criteria)</span><br><span class="line">    svm.setGamma(<span class="number">0</span>)</span><br><span class="line">    svm.setKernel(cv2.ml.SVM_LINEAR)</span><br><span class="line">    svm.setNu(<span class="number">0.5</span>)</span><br><span class="line">    svm.setP(<span class="number">0.1</span>)  <span class="comment"># for EPSILON_SVR, epsilon in loss function?</span></span><br><span class="line">    svm.setC(<span class="number">0.01</span>)  <span class="comment"># From paper, soft classifier</span></span><br><span class="line">    svm.setType(cv2.ml.SVM_EPS_SVR)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&#x27;Starting training svm.&#x27;</span>)</span><br><span class="line">    svm.train(train, cv2.ml.ROW_SAMPLE, labels)</span><br><span class="line">    logger.info(<span class="string">&#x27;Training done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    model_path = os.path.join(pwd, <span class="string">&#x27;svm.xml&#x27;</span>)</span><br><span class="line">    svm.save(model_path)</span><br><span class="line">    logger.info(<span class="string">&#x27;Trained SVM classifier is saved as: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_svm_detector(svm)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>训练过程：训练过程很短，五秒左右便能结束</p><p><img src="https://z3.ax1x.com/2021/06/01/2uZrWD.jpg"></p><h2 id="利用训练好的SVM进行检测"><a href="#利用训练好的SVM进行检测" class="headerlink" title="利用训练好的SVM进行检测"></a>利用训练好的SVM进行检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hog_detect</span>(<span class="params">test, svm_detector, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    导入测试集，测试结果</span></span><br><span class="line"><span class="string">    :param test: 测试数据集</span></span><br><span class="line"><span class="string">    :param svm_detector: 用于HOGDescriptor的SVM检测器</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    hog = cv2.HOGDescriptor()</span><br><span class="line">    hog.setSVMDetector(svm_detector)</span><br><span class="line">    <span class="comment"># opencv自带的训练好了的分类器</span></span><br><span class="line">    <span class="comment">#hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())</span></span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    test_dir = os.path.join(pwd, <span class="string">&#x27;TestData&#x27;</span>)</span><br><span class="line">    cv2.namedWindow(<span class="string">&#x27;Detect&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> test:</span><br><span class="line">        file_path = os.path.join(test_dir, f)</span><br><span class="line">        logger.info(<span class="string">&#x27;Processing &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">        img = cv2.imread(file_path)</span><br><span class="line">        rects, _ = hog.detectMultiScale(img, winStride=(<span class="number">4</span>,<span class="number">4</span>), padding=(<span class="number">8</span>,<span class="number">8</span>), scale=<span class="number">1.05</span>)</span><br><span class="line">        <span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> rects:</span><br><span class="line">            cv2.rectangle(img, (x,y), (x+w,y+h), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;Detect&#x27;</span>, img)</span><br><span class="line">        c = cv2.waitKey(<span class="number">0</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="检测结果"><a href="#检测结果" class="headerlink" title="检测结果"></a>检测结果</h2><h3 id="数据集一："><a href="#数据集一：" class="headerlink" title="数据集一："></a>数据集一：</h3><p><img src="https://z3.ax1x.com/2021/06/01/2uek01.jpg"></p><p>在测试集上效果相对较好，人之间距离较近时可能会有重复框</p><h3 id="数据集二："><a href="#数据集二：" class="headerlink" title="数据集二："></a>数据集二：</h3><p><img src="https://z3.ax1x.com/2021/06/01/2ueFmR.jpg"></p><p>效果很差，经分析可能与正样本数过大以及人在正样本图片中所占范围不够大有关系</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可是尝试通过增多负样本来提高样本多样性，同时在特征提取之前可以通过图像增强和灰度化有效地降低图像局部的阴影和光照变化,相比之下Opencv已经训练好的SVM分类器效果更佳，后面也可以尝试采用深度神经网络来实现更高精度的检测</p><h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logger_init</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    自定义python的日志信息打印配置</span></span><br><span class="line"><span class="string">    :return logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取logger实例，如果参数为空则返回root logger</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;PedestranDetect&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定logger输出格式</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s %(levelname)-8s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件日志</span></span><br><span class="line">    <span class="comment"># file_handler = logging.FileHandler(&quot;test.log&quot;)</span></span><br><span class="line">    <span class="comment"># file_handler.setFormatter(formatter)  # 可以通过setFormatter指定输出格式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 控制台日志</span></span><br><span class="line">    console_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">    console_handler.formatter = formatter  <span class="comment"># 也可以直接给formatter赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为logger添加的日志处理器</span></span><br><span class="line">    <span class="comment"># logger.addHandler(file_handler)</span></span><br><span class="line">    logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定日志的最低输出级别，默认为WARN级别</span></span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_set</span>(<span class="params">logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    导入数据集</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return pos: 正样本文件名的列表</span></span><br><span class="line"><span class="string">    :return neg: 负样本文件名的列表</span></span><br><span class="line"><span class="string">    :return test: 测试数据集文件名的列表。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    logger.info(<span class="string">&#x27;Checking data path!&#x27;</span>)</span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    logger.info(<span class="string">&#x27;Current path is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pwd))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取正样本</span></span><br><span class="line">    pos_dir = os.path.join(pwd, <span class="string">&#x27;Positive&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(pos_dir):</span><br><span class="line">        logger.info(<span class="string">&#x27;Positive data path is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pos_dir))</span><br><span class="line">        pos = os.listdir(pos_dir)</span><br><span class="line">        logger.info(<span class="string">&#x27;Positive samples number:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pos)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取负样本</span></span><br><span class="line">    neg_dir = os.path.join(pwd, <span class="string">&#x27;Negative&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(neg_dir):</span><br><span class="line">        logger.info(<span class="string">&#x27;Negative data path is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(neg_dir))</span><br><span class="line">        neg = os.listdir(neg_dir)</span><br><span class="line">        logger.info(<span class="string">&#x27;Negative samples number:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(neg)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取测试集</span></span><br><span class="line">    test_dir = os.path.join(pwd, <span class="string">&#x27;TestData&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(test_dir):</span><br><span class="line">        logger.info(<span class="string">&#x27;Test data path is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(test_dir))</span><br><span class="line">        test = os.listdir(test_dir)</span><br><span class="line">        logger.info(<span class="string">&#x27;Test samples number:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(test)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pos, neg, test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_train_samples</span>(<span class="params">pos, neg</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    合并正样本pos和负样本pos，创建训练数据集和对应的标签集</span></span><br><span class="line"><span class="string">    :param pos: 正样本文件名列表</span></span><br><span class="line"><span class="string">    :param neg: 负样本文件名列表</span></span><br><span class="line"><span class="string">    :return samples: 合并后的训练样本文件名列表</span></span><br><span class="line"><span class="string">    :return labels: 对应训练样本的标签列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    pos_dir = os.path.join(pwd, <span class="string">&#x27;Positive&#x27;</span>)</span><br><span class="line">    neg_dir = os.path.join(pwd, <span class="string">&#x27;Negative&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    samples = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> pos:</span><br><span class="line">        file_path = os.path.join(pos_dir, f)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">            samples.append(file_path)</span><br><span class="line">            labels.append(<span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> neg:</span><br><span class="line">        file_path = os.path.join(neg_dir, f)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">            samples.append(file_path)</span><br><span class="line">            labels.append(-<span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># labels 要转换成numpy数组，类型为np.int32</span></span><br><span class="line">    labels = np.int32(labels)</span><br><span class="line">    labels_len = <span class="built_in">len</span>(pos) + <span class="built_in">len</span>(neg)</span><br><span class="line">    labels = np.resize(labels, (labels_len, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> samples, labels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_hog</span>(<span class="params">samples, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    从训练数据集中提取HOG特征，并返回</span></span><br><span class="line"><span class="string">    :param samples: 训练数据集</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return train: 从训练数据集中提取的HOG特征</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    train = []</span><br><span class="line">    logger.info(<span class="string">&#x27;Extracting HOG Descriptors...&#x27;</span>)</span><br><span class="line">    num = <span class="number">0.</span></span><br><span class="line">    total = <span class="built_in">len</span>(samples)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> samples:</span><br><span class="line">        num += <span class="number">1.</span></span><br><span class="line">        logger.info(<span class="string">&#x27;Processing &#123;&#125; &#123;:2.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(f, num/total*<span class="number">100</span>))</span><br><span class="line">        hog = cv2.HOGDescriptor((<span class="number">64</span>,<span class="number">128</span>), (<span class="number">16</span>,<span class="number">16</span>), (<span class="number">8</span>,<span class="number">8</span>), (<span class="number">8</span>,<span class="number">8</span>), <span class="number">9</span>)</span><br><span class="line">        <span class="comment"># hog = cv2.HOGDescriptor()</span></span><br><span class="line">        img = cv2.imread(f, <span class="number">1</span>)</span><br><span class="line">        img = cv2.resize(img, (<span class="number">64</span>,<span class="number">128</span>))</span><br><span class="line">        descriptors = hog.compute(img)</span><br><span class="line">        logger.info(<span class="string">&#x27;hog feature descriptor size: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(descriptors.shape))    <span class="comment"># (3780, 1)</span></span><br><span class="line">        train.append(descriptors)</span><br><span class="line"></span><br><span class="line">    train = np.float32(train)</span><br><span class="line">    train = np.resize(train, (total, <span class="number">3780</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_svm_detector</span>(<span class="params">svm</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    导出可以用于cv2.HOGDescriptor()的SVM检测器，实质上是训练好的SVM的支持向量和rho参数组成的列表</span></span><br><span class="line"><span class="string">    :param svm: 训练好的SVM分类器</span></span><br><span class="line"><span class="string">    :return: SVM的支持向量和rho参数组成的列表，可用作cv2.HOGDescriptor()的SVM检测器</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    sv = svm.getSupportVectors()</span><br><span class="line">    rho, _, _ = svm.getDecisionFunction(<span class="number">0</span>)</span><br><span class="line">    sv = np.transpose(sv)</span><br><span class="line">    <span class="keyword">return</span> np.append(sv, [[-rho]], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_svm</span>(<span class="params">train, labels, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    训练SVM分类器</span></span><br><span class="line"><span class="string">    :param train: 训练数据集</span></span><br><span class="line"><span class="string">    :param labels: 对应训练集的标签</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return: SVM检测器（注意：opencv的hogdescriptor中的svm不能直接用opencv的svm模型，而是要导出对应格式的数组）</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    logger.info(<span class="string">&#x27;Configuring SVM classifier.&#x27;</span>)</span><br><span class="line">    svm = cv2.ml.SVM_create()</span><br><span class="line">    svm.setCoef0(<span class="number">0.0</span>)</span><br><span class="line">    svm.setDegree(<span class="number">3</span>)</span><br><span class="line">    criteria = (cv2.TERM_CRITERIA_MAX_ITER + cv2.TERM_CRITERIA_EPS, <span class="number">1000</span>, <span class="number">1e-3</span>)</span><br><span class="line">    svm.setTermCriteria(criteria)</span><br><span class="line">    svm.setGamma(<span class="number">0</span>)</span><br><span class="line">    svm.setKernel(cv2.ml.SVM_LINEAR)</span><br><span class="line">    svm.setNu(<span class="number">0.5</span>)</span><br><span class="line">    svm.setP(<span class="number">0.1</span>)  <span class="comment"># for EPSILON_SVR, epsilon in loss function?</span></span><br><span class="line">    svm.setC(<span class="number">0.01</span>)  <span class="comment"># From paper, soft classifier</span></span><br><span class="line">    svm.setType(cv2.ml.SVM_EPS_SVR)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&#x27;Starting training svm.&#x27;</span>)</span><br><span class="line">    svm.train(train, cv2.ml.ROW_SAMPLE, labels)</span><br><span class="line">    logger.info(<span class="string">&#x27;Training done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    model_path = os.path.join(pwd, <span class="string">&#x27;svm.xml&#x27;</span>)</span><br><span class="line">    svm.save(model_path)</span><br><span class="line">    logger.info(<span class="string">&#x27;Trained SVM classifier is saved as: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_svm_detector(svm)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hog_detect</span>(<span class="params">test, svm_detector, logger</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    导入测试集，测试结果</span></span><br><span class="line"><span class="string">    :param test: 测试数据集</span></span><br><span class="line"><span class="string">    :param svm_detector: 用于HOGDescriptor的SVM检测器</span></span><br><span class="line"><span class="string">    :param logger: 日志信息打印模块</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    hog = cv2.HOGDescriptor()</span><br><span class="line">    hog.setSVMDetector(svm_detector)</span><br><span class="line">    <span class="comment"># opencv自带的训练好了的分类器</span></span><br><span class="line">    <span class="comment">#hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())</span></span><br><span class="line">    pwd = os.getcwd()</span><br><span class="line">    test_dir = os.path.join(pwd, <span class="string">&#x27;TestData&#x27;</span>)</span><br><span class="line">    cv2.namedWindow(<span class="string">&#x27;Detect&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> test:</span><br><span class="line">        file_path = os.path.join(test_dir, f)</span><br><span class="line">        logger.info(<span class="string">&#x27;Processing &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">        img = cv2.imread(file_path)</span><br><span class="line">        rects, _ = hog.detectMultiScale(img, winStride=(<span class="number">4</span>,<span class="number">4</span>), padding=(<span class="number">8</span>,<span class="number">8</span>), scale=<span class="number">1.05</span>)</span><br><span class="line">        <span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> rects:</span><br><span class="line">            cv2.rectangle(img, (x,y), (x+w,y+h), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;Detect&#x27;</span>, img)</span><br><span class="line">        c = cv2.waitKey(<span class="number">0</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    logger = logger_init()</span><br><span class="line">    pos, neg, test = load_data_set(logger=logger)</span><br><span class="line">    samples, labels = load_train_samples(pos, neg)</span><br><span class="line">    train = extract_hog(samples, logger=logger)</span><br><span class="line">    logger.info(<span class="string">&#x27;Size of feature vectors of samples: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(train.shape))</span><br><span class="line">    logger.info(<span class="string">&#x27;Size of labels of samples: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels.shape))</span><br><span class="line">    svm_detector = train_svm(train, labels, logger=logger)</span><br><span class="line">    test_hog_detect(test, svm_detector, logger)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVM </tag>
            
            <tag> HOG </tag>
            
            <tag> 特征提取 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/27/hello-world/"/>
      <url>2021/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
